<<code language="ocaml" | sig
  val ( >>= ) : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t
  val ( >|= ) : 'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t
  val ( <&> ) : unit Lwt.t -> unit Lwt.t -> unit Lwt.t
  val ( <?> ) : 'a Lwt.t -> 'a Lwt.t -> 'a Lwt.t
  val ( =<< ) : ('a -> 'b Lwt.t) -> 'a Lwt.t -> 'b Lwt.t
  val ( =|< ) : ('a -> 'b) -> 'a Lwt.t -> 'b Lwt.t
  module Let_syntax :
    sig
      val return : 'a -> 'a Lwt.t
      val map : 'a Lwt.t -> f:('a -> 'b) -> 'b Lwt.t
      val bind : 'a Lwt.t -> f:('a -> 'b Lwt.t) -> 'b Lwt.t
      val both : 'a Lwt.t -> 'b Lwt.t -> ('a * 'b) Lwt.t
      module Open_on_rhs : sig end
    end
end >>