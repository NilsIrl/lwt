=Module <<a_api_type | module Lwt_seq >> =
<<pre class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|module>> <<span class="ocsforge_color_uid"|<<span class="ocsforge_color_uid"|Lwt_seq>>>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="ocsforge_color_keyword"|sig>><<a_api text=".." | module Lwt_seq >><<span class="ocsforge_color_keyword"|end>>>>**Since** 5.5.0\\

----
<<pre class="ocsforge_color odocwiki_code" id="TYPEt"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|t>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="odocwiki_type"|unit <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="node" | type Lwt_seq.node >> <<a_api text="Lwt.t" | type Lwt.t >>>> >><<div class="odocwiki_info"|~The type of delayed lists containing elements of type <<span class="odocwiki_inlinecode"|~'a>>~.
  ~Note that the concrete list node <<span class="odocwiki_inlinecode"|~'a node>> is delayed under a closure~,
  not a <<span class="odocwiki_inlinecode"|lazy>> block~, which means it might be recomputed every time
  we access it~.
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEnode"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|node>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="odocwiki_variants"|<<span class="odocwiki_variant"|<<span class="odocwiki_variant_constr"|<<span class="ocsforge_color_keyword"| ~|>> <<span class="ocsforge_color_uid"|Nil>>>>>><<span class="odocwiki_variant"|<<span class="odocwiki_variant_constr"|<<span class="ocsforge_color_keyword"| ~|>> <<span class="ocsforge_color_uid"|Cons>> <<span class="ocsforge_color_keyword"|of>> <<span class="odocwiki_type"|'a * 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<span class="odocwiki_comments"|<<span class="odocwiki_comments_open"|(*>> <<span|<<div class="odocwiki_info"|~A fully~-evaluated list node~, either empty or containing an element
  and a delayed tail~.
>>
>><<span class="odocwiki_comments_close"| ~*)>>>>>>>>>><<pre id="VALempty" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|empty>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~The empty sequence~, containing no elements~.
>>
<<pre id="VALreturn" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|return>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~The singleton sequence containing only the given element~.
>>
<<pre id="VALreturn_lwt" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|return~_lwt>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<a_api text="Lwt.t" | type Lwt.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~The singleton sequence containing only the given promised element~.
>>
<<pre id="VALcons" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|cons>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|cons x xs>> is the sequence containing the element <<span class="odocwiki_inlinecode"|x>> followed by
  the sequence <<span class="odocwiki_inlinecode"|xs>>
>>
<<pre id="VALcons_lwt" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|cons~_lwt>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<a_api text="Lwt.t" | type Lwt.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|cons x xs>> is the sequence containing the element promised by <<span class="odocwiki_inlinecode"|x>> followed
  by the sequence <<span class="odocwiki_inlinecode"|xs>>
>>
<<pre id="VALappend" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|append>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|append xs ys>> is the sequence <<span class="odocwiki_inlinecode"|xs>> followed by the sequence <<span class="odocwiki_inlinecode"|ys>>
>>
<<pre id="VALmap" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|map>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|map f seq>> returns a new sequence whose elements are the elements of
  <<span class="odocwiki_inlinecode"|seq>>~, transformed by <<span class="odocwiki_inlinecode"|f>>~.
  ~This transformation is lazy~, it only applies when the result is traversed~.
>>
<<pre id="VALmap_s" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|map~_s>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|map~_s f seq>> is like <<span class="odocwiki_inlinecode"|map f seq>> but <<span class="odocwiki_inlinecode"|f>> is a function that returns a
  promise~.


  ~Note that there is no concurrency between the promises from the underlying
  sequence <<span class="odocwiki_inlinecode"|seq>> and the promises from applying the function <<span class="odocwiki_inlinecode"|f>>~. ~In other
  words~, the next promise~-element of the underlying sequence ~(<<span class="odocwiki_inlinecode"|seq>>~) is only
  created when the current promise~-element of the returned sequence ~(as mapped
  by <<span class="odocwiki_inlinecode"|f>>~) has resolved~. ~This scheduling is true for all the <<span class="odocwiki_inlinecode"|~_s>> functions of
  this module~.
>>
<<pre id="VALfilter" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|filter>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> bool<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~Remove from the sequence the elements that do not satisfy the
  given predicate~.
  ~This transformation is lazy~, it only applies when the result is
  traversed~.
>>
<<pre id="VALfilter_s" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|filter~_s>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> bool <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|filter~_s>> is like <<span class="odocwiki_inlinecode"|filter>> but the predicate returns a promise~.


  ~See <<a_api | val Lwt_seq.map_s >> for additional details about scheduling~.
>>
<<pre id="VALfilter_map" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|filter~_map>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b option<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~Apply the function to every element~; if <<span class="odocwiki_inlinecode"|f x ~= ~None>> then <<span class="odocwiki_inlinecode"|x>> is dropped~;
  if <<span class="odocwiki_inlinecode"|f x ~= ~Some y>> then <<span class="odocwiki_inlinecode"|y>> is returned~.
  ~This transformation is lazy~, it only applies when the result is
  traversed~.
>>
<<pre id="VALfilter_map_s" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|filter~_map~_s>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b option <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|filter~_map~_s>> is like <<span class="odocwiki_inlinecode"|filter>> but the predicate returns a promise~.


  ~See <<a_api | val Lwt_seq.map_s >> for additional details about scheduling~.
>>
<<pre id="VALflat_map" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|flat~_map>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~Map each element to a subsequence~, then return each element of this
  sub~-sequence in turn~.
  ~This transformation is lazy~, it only applies when the result is
  traversed~.
>>
<<pre id="VALfold_left" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|fold~_left>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b <<span class="ocsforge_color_delimiter"| -> >> 'a<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|~Traverse the sequence from left to right~, combining each element with the
  accumulator using the given function~.
  ~The traversal happens immediately and will not terminate ~(i~.e~.~, the promise
  will not resolve~) on infinite sequences~.
>>
<<pre id="VALfold_left_s" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|fold~_left~_s>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<span class="ocsforge_color_delimiter"| -> >> 'b <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|fold~_left~_s>> is like <<span class="odocwiki_inlinecode"|fold~_left>> but the function returns a promise~.


  ~See <<a_api | val Lwt_seq.map_s >> for additional details about scheduling~.
>>
<<pre id="VALiter" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|iter>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> unit<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|~Iterate on the sequence~, calling the ~(imperative~) function on every element~.


  ~The sequence~'s next node is evaluated only once the function has finished
  processing the current element~. ~More formally~: the promise for the <<span class="odocwiki_inlinecode"|n~+~1>>th
  node of the sequence is created only once the promise returned by <<span class="odocwiki_inlinecode"|f>> on the
  <<span class="odocwiki_inlinecode"|n>>th element of the sequence has resolved~.


  ~The traversal happens immediately and will not terminate ~(i~.e~.~, the promise
  will not resolve~) on infinite sequences~.
>>
<<pre id="VALiter_s" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|iter~_s>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|iter~_s>> is like <<span class="odocwiki_inlinecode"|iter>> but the function returns a promise~.


  ~See <<a_api | val Lwt_seq.map_s >> for additional details about scheduling~.
>>
<<pre id="VALiter_p" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|iter~_p>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|~Iterate on the sequence~, calling the ~(imperative~) function on every element~.


  ~The sequence~'s next node is evaluated as soon as the previous node is
  resolved~.


  ~The traversal happens immediately and will not terminate ~(i~.e~.~, the promise
  will not resolve~) on infinite sequences~.
>>
<<pre id="VALiter_n" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|iter~_n>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| ?max_concurrency: >>int <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|iter~_n ~~max~_concurrency f s>>


  ~Iterates on the sequence <<span class="odocwiki_inlinecode"|s>>~, calling the ~(imperative~) function <<span class="odocwiki_inlinecode"|f>> on every
  element~.


  ~The sum total of unresolved promises returned by <<span class="odocwiki_inlinecode"|f>> never exceeds
  <<span class="odocwiki_inlinecode"|max~_concurrency>>~. ~Node suspensions are evaluated only when there is capacity
  for <<span class="odocwiki_inlinecode"|f>>~-promises to be evaluated~. ~Consequently~, there might be significantly
  fewer than <<span class="odocwiki_inlinecode"|max~_concurrency>> promises being evaluated concurrently~; especially
  if the node suspensions take longer to evaluate than the <<span class="odocwiki_inlinecode"|f>>~-promises~.


  ~The traversal happens immediately and will not terminate ~(i~.e~.~, the promise
  will not resolve~) on infinite sequences~.
**Raises** {{{Invalid_argument}}} if <<span class="odocwiki_inlinecode"|max~_concurrency ~< ~1>>~.\\
>>
<<div class="odocwiki_param_info"|<<span class="code"|max_concurrency>> : defaults to <<span class="odocwiki_inlinecode"|~1>>~.>>
<<pre id="VALunfold" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|unfold>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'b <<span class="ocsforge_color_delimiter"| -> >> <<span class="ocsforge_color_delimiter"| ( >>'a * 'b<<span class="ocsforge_color_delimiter"| ) >> option<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'b <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~Build a sequence from a step function and an initial value~.
  <<span class="odocwiki_inlinecode"|unfold f u>> returns <<span class="odocwiki_inlinecode"|empty>> if the promise <<span class="odocwiki_inlinecode"|f u>> resolves to <<span class="odocwiki_inlinecode"|~None>>~,
  or <<span class="odocwiki_inlinecode"|fun ~(~) ~-~> ~Lwt~.return ~(~Cons ~(x~, unfold f y~)~)>> if the promise <<span class="odocwiki_inlinecode"|f u>> resolves
  to <<span class="odocwiki_inlinecode"|~Some ~(x~, y~)>>~.
>>
<<pre id="VALunfold_lwt" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|unfold~_lwt>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'b <<span class="ocsforge_color_delimiter"| -> >> <<span class="ocsforge_color_delimiter"| ( >>'a * 'b<<span class="ocsforge_color_delimiter"| ) >> option <<a_api text="Lwt.t" | type Lwt.t >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'b <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|unfold~_lwt>> is like <<span class="odocwiki_inlinecode"|unfold>> but the step function returns a promise~.
>>
<<pre id="VALto_list" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|to~_list>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<a_api text="t" | type Lwt_seq.t >> <<span class="ocsforge_color_delimiter"| -> >> 'a list <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="odocwiki_info"|~Convert a sequence to a list~, preserving order~.
  ~The traversal happens immediately and will not terminate ~(i~.e~.~, the promise
  will not resolve~) on infinite sequences~.
>>
<<pre id="VALof_list" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|of~_list>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a list <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~Convert a list to a sequence~, preserving order~.
>>
<<pre id="VALof_seq" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|of~_seq>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<span class="ocsforge_color_uid"|Stdlib>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_uid"|Seq>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~Convert from <<span class="odocwiki_inlinecode"|~'a ~Stdlib~.~Seq~.t>> to <<span class="odocwiki_inlinecode"|~'a ~Lwt~_seq~.t>>~.
  ~This transformation is lazy~, it only applies when the result is
  traversed~.
>>
<<pre id="VALof_seq_lwt" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|of~_seq~_lwt>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|'a <<a_api text="Lwt.t" | type Lwt.t >> <<span class="ocsforge_color_uid"|Stdlib>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_uid"|Seq>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>> <<span class="ocsforge_color_delimiter"| -> >> 'a <<a_api text="t" | type Lwt_seq.t >>>>>><<div class="odocwiki_info"|~Convert from <<span class="odocwiki_inlinecode"|~'a ~Lwt~.t ~Stdlib~.~Seq~.t>> to <<span class="odocwiki_inlinecode"|~'a ~Lwt~_seq~.t>>~.
  ~This transformation is lazy~, it only applies when the result is
  traversed~.
>>
